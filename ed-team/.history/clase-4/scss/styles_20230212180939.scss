// Las funciones tiene como objetivo engreganos un valor

// selector{
//     propiedad:valor;
// }

@import "config/functions";
@import "config/variables";

body{
    font-size: double(10px);
    font-size: em(20px);
    background:img('imagen.jpg');
}

/*
    Funciones de strings
    quote($string)
    unquote($string)
    str-length($string)
    str-index($string, $value)
*/

$width: 1px;
$style: solid;
$color: red;

$colors:(
    primary: yellow,
);

body{
    border:unquote( $width + ' '+ $style + ' ' +  $color);
    &::before{
        content: quote($style);
    }
    // index: str-index($style, "i")
    // index: to-upper-case($style)
    color:map-get($colors, primary);
}

// Funciones de numeros
//  percentage ($number)
// floor(54.9)
// ceil(54.1)
// max($number1, $number2)

@function columns($columns, $total-columns){
    @return percentage($columns / $total-columns)
};

// @for $i from 1 through 12{
//     .cols-#{$i}{
//         width: columns($i, 12);
//     }
// }

body{
    // width:columns(4, 12);
    width: round(54.5px);
    width: random(15);
}



// Funciones de listas y mapas
// nth($list, n)
// index ($list, $value)
// join($list1,$list2,$list3,separador: space)
// append($list,$value,$separador: space | comma)


//Mapas
//map-get($map,$key)
//map-keys($map)
//map-values($map)
//map-has-key($map,$key)
//map-merge($map1,$map2)


$color: red;

$border: 1px solid red;
$border2:1px dotted green;

$colors:(
    primary: green,
    secondary: blue,
    tertiary: red,
);

@function color($color-key){
    @if map-has-key($map: $colors, $key: $color-key){
        @return map-get($colors,$color-key);
    }
    @return null;
}

div{
    // border-color: nth($border, 3);
    // border-color: index($border, red);
    // border-color: join($border, $border2);
    // border: append(1px solid,$color);
    // border-color: map-get($colors,primary);
    border-color:color(tertiary);
}

// Funciones de introspeccion
//inspect() es como un console.log
//type-of($value)  typo de dato
//unit($number) unidad de un numero como string
//unitless() --> devuelve true si el numero no tiene unidad
//mixin-exists($mixin-name)
//function-exists(function)
//variable-exists($variable)
//global-variable-exists($variable)

@mixin button{
    color: red;
}

@if mixin-exists(button){
    div{
        background: red;
    }
}

$colors:(
    primary: green,
    secondary: blue,
);

span{
    // color:inspect($colors);
    // color:unit(10px);
    color:unitless(10);
}

